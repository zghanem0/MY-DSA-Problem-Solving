>> any devide and conquer approach using O(log n):
	- in Binary tree :O(log N): happend when u will not have to traverse to the entire N for example BST mechanism if "Blanaced"
	- in sorting O(n log n): why?, n : comes from that u must traverse for each element to compare them in order to sort them and (log n ) from spliting the array into binary unites to compare
	that is why the merge-sort O(N log N) because (log n) is the number of branches and N because it is merging the entire array in every single branch, so time complexity of the overall the function ( N(input size) * number branch lvls ) 
	

>> exponential may be 2^n or 10^n or 1/2^n  or x^2 : it means every n time the function branches(spawn) x times for example, if our fun is f(n)=2^10 (like fibbonacie func): 
means that every recursion or (n) the function branches to 2 


>> in in dict and set is o(1)
    for i in A:
        if i in dic:

>> the time complexity of common bruteforce techniques is O(nm), which n the length of string/elements that i want to search for, m the entire string/elements
- sometimes also be O(n^2)
O(m*n) refers to the runnning time of the boyer-moore-horspool Algorithm, which finds all the occurrences of a substring in a string.
 Python's str.find Method finds only one occurrence of the substring, so it's (str.find) will depend on the position of the first occurrence of substring.

>> quadrtic vs cubic :
in maximum subarray algorithm u may think you're using a quadrtic but in the fact your are using qubic to make your algo is quadrtic u should do the following:
to calc the maximum slice, instead of back to the first element and calc them and u already did that before , 
so  u can use the previouse result instead of go from the first element ,
if u back to the first element u algo will gonna be a cubic 


>>> Below are some common Big-O functions while analyzing algorithms.

O(1) - constant time
O(log(n)) - logarithmic time
O((log(n))c) - polylogarithmic time
O(n) - linear time
O(n2) - quadratic time
O(nc) - polynomial time : 3*n, 5*n^2, n^3, n^4, all of then under polynomial 
O(c^n) - exponential time
O(n!) - factorial time
(n = size of input, c = some constant)

