>> in in dict and set is o(1)
    for i in A:
        if i in dic:

>> the time complexity of common bruteforce techniques is O(nm), which n the length of string/elements that i want to search for, m the entire string/elements
- sometimes also be O(n^2)
O(m*n) refers to the runnning time of the boyer-moore-horspool Algorithm, which finds all the occurrences of a substring in a string.
 Python's str.find Method finds only one occurrence of the substring, so it's (str.find) will depend on the position of the first occurrence of substring.

>> quadrtic vs cubic :
in maximum subarray algorithm u may think you're using a quadrtic but in the fact your are using qubic to make your algo is quadrtic u should do the following:
to calc the maximum slice, instead of back to the first element and calc them and u already did that before , 
so  u can use the previouse result instead of go from the first element ,
if u back to the first element u algo will gonna be a cubic 


>>> Below are some common Big-O functions while analyzing algorithms.

O(1) - constant time
O(log(n)) - logarithmic time
O((log(n))c) - polylogarithmic time
O(n) - linear time
O(n2) - quadratic time
O(nc) - polynomial time
O(cn) - exponential time
O(n!) - factorial time
(n = size of input, c = some constant)

