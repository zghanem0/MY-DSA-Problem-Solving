What is the difference between memoization and dynamic programming?
------------------------------ short answer -----------------------------
Dynamic programming == careful brute force == sub-problems then reuse
is technique for solving problems of recursive nature by store the previouse Computation results in a table. so Dynamic Programming is mainly an optimization of  plain recursion.
for example changes the search space from being exponentially to be  linear
This problem can be solved by using 2 approaches, two patterns of solving dynamic programming (DP) problems
BEST EXPLAINATION: https://www.geeksforgeeks.org/tabulation-vs-memoization/
    1. Memoization (Top Down) - Using recursion to solve the sub-problem and storing the result in some hash table.
        Top-down approach
        Caches the results of function calls
        Recursive implementation
        Well-suited for problems with a relatively small set of inputs
        Used when the subproblems have overlapping subproblems

    2. Tabulation (Bottom Up) - Using Iterative approach to solve the problem by solving the smaller sub-problems first and then using it during the execution of bigger problem.
        Bottom-up approach
        Stores the results of subproblems in a table
        Iterative implementation

        Well-suited for problems with a large set of inputs
        Used when the subproblems do not overlap
        Here’s an example of using memoization and tabulation to solve the same problem – calculating the nth number in the Fibonacci sequence:



How apply dynamic programming?
    1. Find the recursion in the problem.
    2. Top-down: store the answer for each subproblem in a table to avoid having to recompute them.
    3. Bottom-up: Find the right order to evaluate the results so that partial results are available when needed.
------------------------------ detailed answer -----------------------------
What is difference between memoization and dynamic programming?
While a Greedy Algorithm is usually called naive, because it may run multiple times over the same set of data, Dynamic Programming avoids this pitfall through a deeper understanding of the partial results that must be stored to help build the final solution.
Dynamic programming is technique for solving problems of recursive nature.,so Dynamic Programming is mainly an optimization of  plain recursion
Dynamic programming is typically implemented using tabulation, but can also be implemented using memoization. So as you can see, either one is a "subset" of the other.

Memoization is a term describing an optimization technique where you cache previously computed results, and return the cached result when the same computation is needed again.

A reasonable follow-up question is: What is the difference between tabulation (the typical dynamic programming technique) and memoization?
When you solve a dynamic programming problem using tabulation you solve the problem "bottom up", i.e., by solving all related sub-problems first, typically by filling up an n-dimensional table. Based on the results in the table, the solution to the "top" / original problem is then computed.
If you use memoization to solve the problem you do it by maintaining a map of already solved sub problems. You do it "top down" in the sense that you solve the "top" problem first (which typically recurse down to solve the sub-problems).
A good slide from here (link is now dead, slide is still good though):
    • If all subproblems must be solved at least once, a bottom-up dynamic-programming algorithm usually outperforms a top-down memoized algorithm by a constant factor
        ◦ No overhead for recursion and less overhead for maintaining table
        ◦ There are some problems for which the regular pattern of table accesses in the dynamic-programming algorithm can be exploited to reduce the time or space requirements even further
    • If some subproblems in the subproblem space need not be solved at all, the memoized solution has the advantage of solving only those subproblems that are definitely required
Additional resources:
    • Wikipedia: Memoization, Dynamic Programming
    • Related SO Q/A: Memoization or Tabulation approach for Dynamic programming
which is better approach in terms of time and space complexity?
Short answer: it depends on the problem!
Memoization usually requires more code and is less straightforward, but has computational advantages in some problems, mainly those which you do not need to compute all the values for the whole matrix to reach the answer.
Tabulation is more straightforward, but may compute unnecessary values. If you do need to compute all the values, this method is usually faster, though, because of the smaller overhead.


# When memoiztion over tabulation :
sometimes the search space is very very large 1000000000000, so it is not logic to store all the n  elements, so u don't need to store the elements of make your space complexty is O(N) such as what memoaization do in most(all) cases.
here is the dp come the dp will going to theough the element without storing them, just will solve the smaller sub-problems first and then using it during the execution of bigger problem. 

============== when to use memoaization over tabulation ==========
- when we couldn't able to solve the problem using bottom-up manner or we don't need to solve all of sub-problems, as u know tabulation solve all of sub-problems.
- in memoaization  u can contol what u need to solve and what u need to store, on the other hand the tabulation solve any sub problems if your sub-problems not dense so u will have to use memoaization.
- otherwise use tabulation mostly better better performance.


============== where top down and bottom up come from ============
- depends on where is your smallest promlem
- in memoization: recurse again and again untill he reach to the top then start solve it from the top-to-down, that is why ur backtracking from the smallest problem until u reach back to the initial problem
- in tabulation:  start from the first step step pauntil u solve the problem

# Dynamic Programming generally come in one of these 4 categories :
1- minizatation
2- maximization
3- counting
4- longest

# Dynamic programing charactaristics:
1- overlaping: sub-problems get overlapped/occured/appeared again and again
2- optimal subproblem: 

# dp styles:
1- subset style : pick or leave





######### how to the Memoization Technique ######## 
1- make it work: 
  - visualie the the problem as a tree
  - impelement the tree using recursion, usually by decreasing recursively until reach to the base case
  - test it 
2- make it efficient: 
  - add a memo(key) for the previously computed results into a hashtable  that is why called memoization, ex: memo[n] = fastFib(n-1, memo) + fastFib(n-2, memo)
  -  and add a base case to retuen memo values
  - store the return values into the memo


========== how to solve any dp problem =============
1- solve the smallest problem
2- define the edge cases
3- 

# Resources
https://www.youtube.com/watch?v=oBt53YbR9Kk
